function X = acoshm(A)
%ACOSHM    Matrix inverse hyperbolic cosine.
%   X = acoshm(A) is the principal inverse hyperbolic cosine of A.
%   A must not have any real eigenvalues on the interval (-inf,1],
%   which is the branch cut of the inverse hyperbolic cosine.
%
%   Reference: 
%   Mary Aprahamian and Nicholas J. Higham, Matrix Inverse Trigonometric
%   and Inverse Hyperbolic Functions: Theory and Algorithms, 2015, In
%   Preparation
%
%   Mary Aprahamian and Nicholas J. Higham, Sep 2015

[Q,T] = schur(A,'complex');
d = diag(T);
if any( imag(d) == 0 & real(d) <= 1 )
   error('Input has a real eigenvalue less than 1.')
end

S = matsignt(-1i*T);
C = acosm(T);
X = S*C;
X = 1i*(Q*X*Q');

%%%%%%%%%%%%%%%%%%%%%%%
function S = matsignt(T)
%MATSIGNT    Matrix sign function of a triangular matrix.
%   S = MATSIGN(T) computes the matrix sign function S of the
%   upper triangular matrix T using a recurrence.

% This function is a minor adaptation of subfunction matsign 
% of signm from The Matrix Function Toolbox.

n = length(T);

t = diag(T);
S = diag( real(sqrt(t.^2)./t ));  % Required scalar sign function.
% S = diag( sign( diag(real(T)) ) ); % Original: for real T only!

for p = 1:n-1
   for i = 1:n-p

      j = i+p;
      d = T(j,j) - T(i,i);

      if S(i,i) ~= -S(j,j)  % Solve via S^2 = I if we can.

         % Get S(i,j) from S^2 = I.
         k = i+1:j-1;
         S(i,j) = -S(i,k)*S(k,j) / (S(i,i)+S(j,j));

      else

         % Get S(i,j) from S*T = T*S.
         s = T(i,j)*(S(j,j)-S(i,i));
         if p > 1
            k = i+1:j-1;
            s = s + T(i,k)*S(k,j) - S(i,k)*T(k,j);
         end
         S(i,j) = s/d;

      end

   end
end
